// <auto-generated />
using System;
using KoiFarmShop.Repositories.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KoiFarmShop.Repositories.Migrations
{
    [DbContext(typeof(KoiFarmShopDbContext))]
    [Migration("20241107150432_MakeHomeAddressOptionalandAddBirthDate")]
    partial class MakeHomeAddressOptionalandAddBirthDate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KoiFarmShop.Repositories.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("HomeAdress")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("KoiFarmShop.Repositories.Entities.Blog", b =>
                {
                    b.Property<int>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BlogID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlogId"));

                    b.Property<int?>("CateId")
                        .HasColumnType("int")
                        .HasColumnName("CateID");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("CreatedDay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("UpdateDay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("BlogId")
                        .HasName("PK__Blog__54379E50E7DE9897");

                    b.HasIndex("CateId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdateBy");

                    b.ToTable("Blog", (string)null);
                });

            modelBuilder.Entity("KoiFarmShop.Repositories.Entities.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"));

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Breed")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<int?>("CateId")
                        .HasColumnType("int")
                        .HasColumnName("CateID");

                    b.Property<DateOnly?>("CreatedDay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<DateOnly?>("DateReceived")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("DateSent")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Koiname")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Origin")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<double?>("Size")
                        .HasColumnType("float");

                    b.Property<int?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("UpdateDay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("BookingId")
                        .HasName("PK__Booking__73951AEDEAE4B598");

                    b.HasIndex("CateId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Booking", (string)null);
                });

            modelBuilder.Entity("KoiFarmShop.Repositories.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("CategoryId")
                        .HasName("PK__Category__19093A0B1690CB8F");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("KoiFarmShop.Repositories.Entities.CommentBlog", b =>
                {
                    b.Property<int>("CmtBlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CmtBlogID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CmtBlogId"));

                    b.Property<int?>("BlogId")
                        .HasColumnType("int")
                        .HasColumnName("BlogID");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("CreatedDay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("UpdateDay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("CmtBlogId")
                        .HasName("PK__CommentB__5D39C724E7802CF4");

                    b.HasIndex("BlogId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdateBy");

                    b.ToTable("CommentBlog", (string)null);
                });

            modelBuilder.Entity("KoiFarmShop.Repositories.Entities.CommentKoi", b =>
                {
                    b.Property<int>("CmtKoiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CmtKoiId"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("CreatedDay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("KoiId")
                        .HasColumnType("int")
                        .HasColumnName("KoiID");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("UpdateDay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("CmtKoiId")
                        .HasName("PK__CommentK__06D742EA68DD1AE1");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("KoiId");

                    b.HasIndex("UpdateBy");

                    b.ToTable("CommentKoi", (string)null);
                });

            modelBuilder.Entity("KoiFarmShop.Repositories.Entities.CommentNews", b =>
                {
                    b.Property<int>("CmtNewsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CmtNewsID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CmtNewsId"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("CreatedDay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("NewsId")
                        .HasColumnType("int")
                        .HasColumnName("NewsID");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("UpdateDay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("CmtNewsId")
                        .HasName("PK__CommentN__EF677CE326C0260E");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("NewsId");

                    b.HasIndex("UpdateBy");

                    b.ToTable("CommentNews");
                });

            modelBuilder.Entity("KoiFarmShop.Repositories.Entities.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactId"));

                    b.Property<int?>("CateId")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("CreatedDay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Report")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ContactId")
                        .HasName("PK__Contact__5C66259BC3730F7F");

                    b.HasIndex("CateId");

                    b.HasIndex("UserId");

                    b.ToTable("Contact", (string)null);
                });

            modelBuilder.Entity("KoiFarmShop.Repositories.Entities.Discount", b =>
                {
                    b.Property<int>("DiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DiscountID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiscountId"));

                    b.Property<int?>("KoiId")
                        .HasColumnType("int");

                    b.Property<int?>("ProId")
                        .HasColumnType("int");

                    b.HasKey("DiscountId")
                        .HasName("PK__Discount__E43F6DF61507A0E4");

                    b.HasIndex("KoiId");

                    b.HasIndex("ProId");

                    b.ToTable("Discount", (string)null);
                });

            modelBuilder.Entity("KoiFarmShop.Repositories.Entities.Koi", b =>
                {
                    b.Property<int>("KoiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KoiId"));

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Breed")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Detail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)");

                    b.Property<int?>("KoiCateId")
                        .HasColumnType("int")
                        .HasColumnName("KoiCateID");

                    b.Property<string>("Origin")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<double?>("Size")
                        .HasColumnType("float");

                    b.Property<int?>("Stock")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("KoiId")
                        .HasName("PK__Koi__E03435989DFD3E0B");

                    b.HasIndex("KoiCateId");

                    b.ToTable("Koi", (string)null);
                });

            modelBuilder.Entity("KoiFarmShop.Repositories.Entities.KoiCategory", b =>
                {
                    b.Property<int>("KoiCateId")
                        .HasColumnType("int");

                    b.Property<int?>("CateId")
                        .HasColumnType("int")
                        .HasColumnName("CateID");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("KoiCateId")
                        .HasName("PK__KoiCateg__01AE527B4B061B71");

                    b.HasIndex("CateId");

                    b.ToTable("KoiCategory", (string)null);
                });

            modelBuilder.Entity("KoiFarmShop.Repositories.Entities.News", b =>
                {
                    b.Property<int>("NewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NewID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NewId"));

                    b.Property<int?>("CateId")
                        .HasColumnType("int")
                        .HasColumnName("Cate_ID");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("CreatedDay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Image")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("UpdateDay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("NewId")
                        .HasName("PK__News__7CC3769E53BAA46E");

                    b.HasIndex("CateId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdateBy");

                    b.ToTable("News");
                });

            modelBuilder.Entity("KoiFarmShop.Repositories.Entities.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<DateOnly?>("CreatedDay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<string>("ShipAddress")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<DateOnly?>("UpdateDay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("OrderId")
                        .HasName("PK__Orders__C3905BCF3012034B");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("KoiFarmShop.Repositories.Entities.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderDetailID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailId"));

                    b.Property<int?>("KoiId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("OrderDetailId")
                        .HasName("PK__OrderDet__D3B9D30C5EFA8070");

                    b.HasIndex("KoiId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetail", (string)null);
                });

            modelBuilder.Entity("KoiFarmShop.Repositories.Entities.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<string>("PermissionName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("PermissionId")
                        .HasName("PK__Permissi__EFA6FB2F950F0142");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("KoiFarmShop.Repositories.Entities.Promotion", b =>
                {
                    b.Property<int>("ProId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProId"));

                    b.Property<DateOnly?>("DayEnd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateOnly?>("DayStart")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<double?>("Percent")
                        .HasColumnType("float");

                    b.HasKey("ProId")
                        .HasName("PK__Promotio__620295901C480AC6");

                    b.ToTable("Promotion", (string)null);
                });

            modelBuilder.Entity("KoiFarmShop.Repositories.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("RoleName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("RoleId")
                        .HasName("PK__Roles__8AFACE1A8B20423C");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("KoiFarmShop.Repositories.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateOnly?>("CreatedDay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<DateOnly?>("UpdateDay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UserAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId")
                        .HasName("PK__User__1788CC4CB0F9474D");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Phone" }, "UQ__User__5C7E359E2EA923D6")
                        .IsUnique()
                        .HasFilter("[Phone] IS NOT NULL");

                    b.HasIndex(new[] { "Email" }, "UQ__User__A9D1053437156E29")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RolePermission", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "PermissionId")
                        .HasName("PK__RolePerm__6400A1A8D9198E28");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions", (string)null);
                });

            modelBuilder.Entity("KoiFarmShop.Repositories.Entities.Blog", b =>
                {
                    b.HasOne("KoiFarmShop.Repositories.Entities.Category", "Cate")
                        .WithMany("Blogs")
                        .HasForeignKey("CateId")
                        .HasConstraintName("FK__Blog__CateID__14270015");

                    b.HasOne("KoiFarmShop.Repositories.Entities.User", "CreatedByNavigation")
                        .WithMany("BlogCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK__Blog__CreatedBy__151B244E");

                    b.HasOne("KoiFarmShop.Repositories.Entities.User", "UpdateByNavigation")
                        .WithMany("BlogUpdateByNavigations")
                        .HasForeignKey("UpdateBy")
                        .HasConstraintName("FK__Blog__UpdateBy__160F4887");

                    b.Navigation("Cate");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdateByNavigation");
                });

            modelBuilder.Entity("KoiFarmShop.Repositories.Entities.Booking", b =>
                {
                    b.HasOne("KoiFarmShop.Repositories.Entities.Category", "Cate")
                        .WithMany("Bookings")
                        .HasForeignKey("CateId")
                        .HasConstraintName("FK__Booking__CateID__4F47C5E3");

                    b.HasOne("KoiFarmShop.Repositories.Entities.User", "Customer")
                        .WithMany("Bookings")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__Booking__Custome__503BEA1C");

                    b.Navigation("Cate");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("KoiFarmShop.Repositories.Entities.CommentBlog", b =>
                {
                    b.HasOne("KoiFarmShop.Repositories.Entities.Blog", "Blog")
                        .WithMany("CommentBlogs")
                        .HasForeignKey("BlogId")
                        .HasConstraintName("FK__CommentBl__BlogI__1332DBDC");

                    b.HasOne("KoiFarmShop.Repositories.Entities.User", "CreatedByNavigation")
                        .WithMany("CommentBlogCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK__CommentBl__Creat__17036CC0");

                    b.HasOne("KoiFarmShop.Repositories.Entities.User", "UpdateByNavigation")
                        .WithMany("CommentBlogUpdateByNavigations")
                        .HasForeignKey("UpdateBy")
                        .HasConstraintName("FK__CommentBl__Updat__17F790F9");

                    b.Navigation("Blog");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdateByNavigation");
                });

            modelBuilder.Entity("KoiFarmShop.Repositories.Entities.CommentKoi", b =>
                {
                    b.HasOne("KoiFarmShop.Repositories.Entities.User", "CreatedByNavigation")
                        .WithMany("CommentKoiCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK__CommentKo__Creat__6C190EBB");

                    b.HasOne("KoiFarmShop.Repositories.Entities.Koi", "Koi")
                        .WithMany("CommentKois")
                        .HasForeignKey("KoiId")
                        .HasConstraintName("FK__CommentKo__KoiID__0C85DE4D");

                    b.HasOne("KoiFarmShop.Repositories.Entities.User", "UpdateByNavigation")
                        .WithMany("CommentKoiUpdateByNavigations")
                        .HasForeignKey("UpdateBy")
                        .HasConstraintName("FK__CommentKo__Updat__18EBB532");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Koi");

                    b.Navigation("UpdateByNavigation");
                });

            modelBuilder.Entity("KoiFarmShop.Repositories.Entities.CommentNews", b =>
                {
                    b.HasOne("KoiFarmShop.Repositories.Entities.User", "CreatedByNavigation")
                        .WithMany("CommentNewsCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK__CommentNe__Creat__114A936A");

                    b.HasOne("KoiFarmShop.Repositories.Entities.News", "News")
                        .WithMany("CommentNews")
                        .HasForeignKey("NewsId")
                        .HasConstraintName("FK__CommentNe__NewsI__0E6E26BF");

                    b.HasOne("KoiFarmShop.Repositories.Entities.User", "UpdateByNavigation")
                        .WithMany("CommentNewsUpdateByNavigations")
                        .HasForeignKey("UpdateBy")
                        .HasConstraintName("FK__CommentNe__Updat__123EB7A3");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("News");

                    b.Navigation("UpdateByNavigation");
                });

            modelBuilder.Entity("KoiFarmShop.Repositories.Entities.Contact", b =>
                {
                    b.HasOne("KoiFarmShop.Repositories.Entities.Category", "Cate")
                        .WithMany("Contacts")
                        .HasForeignKey("CateId")
                        .HasConstraintName("FK__Contact__CateId__3C34F16F");

                    b.HasOne("KoiFarmShop.Repositories.Entities.User", "User")
                        .WithMany("Contacts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Contact__UserId__3D2915A8");

                    b.Navigation("Cate");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KoiFarmShop.Repositories.Entities.Discount", b =>
                {
                    b.HasOne("KoiFarmShop.Repositories.Entities.Koi", "Koi")
                        .WithMany("Discounts")
                        .HasForeignKey("KoiId")
                        .HasConstraintName("FK__Discount__KoiId__73BA3083");

                    b.HasOne("KoiFarmShop.Repositories.Entities.Promotion", "Pro")
                        .WithMany("Discounts")
                        .HasForeignKey("ProId")
                        .HasConstraintName("FK__Discount__ProId__72C60C4A");

                    b.Navigation("Koi");

                    b.Navigation("Pro");
                });

            modelBuilder.Entity("KoiFarmShop.Repositories.Entities.Koi", b =>
                {
                    b.HasOne("KoiFarmShop.Repositories.Entities.KoiCategory", "KoiCate")
                        .WithMany("Kois")
                        .HasForeignKey("KoiCateId")
                        .HasConstraintName("FK__Koi__KoiCateID__6754599E");

                    b.Navigation("KoiCate");
                });

            modelBuilder.Entity("KoiFarmShop.Repositories.Entities.KoiCategory", b =>
                {
                    b.HasOne("KoiFarmShop.Repositories.Entities.Category", "Cate")
                        .WithMany("KoiCategories")
                        .HasForeignKey("CateId")
                        .HasConstraintName("FK__KoiCatego__CateI__619B8048");

                    b.Navigation("Cate");
                });

            modelBuilder.Entity("KoiFarmShop.Repositories.Entities.News", b =>
                {
                    b.HasOne("KoiFarmShop.Repositories.Entities.Category", "Cate")
                        .WithMany("News")
                        .HasForeignKey("CateId")
                        .HasConstraintName("FK__News__Cate_ID__0D7A0286");

                    b.HasOne("KoiFarmShop.Repositories.Entities.User", "CreatedByNavigation")
                        .WithMany("NewsCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK__News__CreatedBy__0F624AF8");

                    b.HasOne("KoiFarmShop.Repositories.Entities.User", "UpdateByNavigation")
                        .WithMany("NewsUpdateByNavigations")
                        .HasForeignKey("UpdateBy")
                        .HasConstraintName("FK__News__UpdateBy__10566F31");

                    b.Navigation("Cate");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdateByNavigation");
                });

            modelBuilder.Entity("KoiFarmShop.Repositories.Entities.Order", b =>
                {
                    b.HasOne("KoiFarmShop.Repositories.Entities.User", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__Orders__Customer__76969D2E");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("KoiFarmShop.Repositories.Entities.OrderDetail", b =>
                {
                    b.HasOne("KoiFarmShop.Repositories.Entities.Koi", "Koi")
                        .WithMany("OrderDetails")
                        .HasForeignKey("KoiId")
                        .HasConstraintName("FK__OrderDeta__KoiId__7B5B524B");

                    b.HasOne("KoiFarmShop.Repositories.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK__OrderDeta__Order__7A672E12");

                    b.Navigation("Koi");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("KoiFarmShop.Repositories.Entities.User", b =>
                {
                    b.HasOne("KoiFarmShop.Repositories.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK__User__RoleID__5535A963");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("KoiFarmShop.Repositories.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("KoiFarmShop.Repositories.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KoiFarmShop.Repositories.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("KoiFarmShop.Repositories.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RolePermission", b =>
                {
                    b.HasOne("KoiFarmShop.Repositories.Entities.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .IsRequired()
                        .HasConstraintName("FK__RolePermi__Permi__5CD6CB2B");

                    b.HasOne("KoiFarmShop.Repositories.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK__RolePermi__RoleI__5BE2A6F2");
                });

            modelBuilder.Entity("KoiFarmShop.Repositories.Entities.Blog", b =>
                {
                    b.Navigation("CommentBlogs");
                });

            modelBuilder.Entity("KoiFarmShop.Repositories.Entities.Category", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("Bookings");

                    b.Navigation("Contacts");

                    b.Navigation("KoiCategories");

                    b.Navigation("News");
                });

            modelBuilder.Entity("KoiFarmShop.Repositories.Entities.Koi", b =>
                {
                    b.Navigation("CommentKois");

                    b.Navigation("Discounts");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("KoiFarmShop.Repositories.Entities.KoiCategory", b =>
                {
                    b.Navigation("Kois");
                });

            modelBuilder.Entity("KoiFarmShop.Repositories.Entities.News", b =>
                {
                    b.Navigation("CommentNews");
                });

            modelBuilder.Entity("KoiFarmShop.Repositories.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("KoiFarmShop.Repositories.Entities.Promotion", b =>
                {
                    b.Navigation("Discounts");
                });

            modelBuilder.Entity("KoiFarmShop.Repositories.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("KoiFarmShop.Repositories.Entities.User", b =>
                {
                    b.Navigation("BlogCreatedByNavigations");

                    b.Navigation("BlogUpdateByNavigations");

                    b.Navigation("Bookings");

                    b.Navigation("CommentBlogCreatedByNavigations");

                    b.Navigation("CommentBlogUpdateByNavigations");

                    b.Navigation("CommentKoiCreatedByNavigations");

                    b.Navigation("CommentKoiUpdateByNavigations");

                    b.Navigation("CommentNewsCreatedByNavigations");

                    b.Navigation("CommentNewsUpdateByNavigations");

                    b.Navigation("Contacts");

                    b.Navigation("NewsCreatedByNavigations");

                    b.Navigation("NewsUpdateByNavigations");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
